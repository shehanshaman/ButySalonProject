/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import comboSearch.ComboSearch;
import controller.CatergoryControllerByChule;
import controller.ItemControllerByChule;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import models.Catergory;
import models.Item;
import validation.Validation;

/**
 *
 * @author Kanishka Gunarathna
 */
public class NewStockPenal extends javax.swing.JPanel {

    /**
     * Creates new form NewStockPenal
     */
    DefaultTableModel tableModel = new DefaultTableModel();
    private ComboSearch itemListById;
    private ComboSearch itemListByName;
    private ComboSearch getCategoryList;

    public NewStockPenal() {
        initComponents();
        itemCodeCombo.setEnabled(true);
        nameCombo.setEnabled(false);
        categoryCombo.setEnabled(false);
        updatePenal.setEnabled(false);
        buttonGroup2.add(increseButton);
        buttonGroup2.add(decreaseRadioButton);
        increseButton.setSelected(true);
        tableModel = (DefaultTableModel) itemTable.getModel();
        itemListById = new ComboSearch();
        itemListByName = new ComboSearch();
        getCategoryList = new ComboSearch();
        try {
            getItemListById();
            getItemListByName();
            getCategoryList();
            setItemsToTableById();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        itemCodeR = new javax.swing.JRadioButton();
        itemCodeCombo = new javax.swing.JComboBox();
        itemNameR = new javax.swing.JRadioButton();
        nameCombo = new javax.swing.JComboBox();
        itemCAtergoryR = new javax.swing.JRadioButton();
        categoryCombo = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        updatePenal = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        itemName = new javax.swing.JTextField();
        itemCatergory = new javax.swing.JTextField();
        itemCode = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sellingPrice = new javax.swing.JTextField();
        qty = new javax.swing.JTextField();
        buyingPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        increseButton = new javax.swing.JRadioButton();
        decreaseRadioButton = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();

        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 1, 36)); // NOI18N
        jLabel1.setText("Add New Stock");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(310, 0, 276, 50);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(10, 49, 877, 10);

        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Category", "All QTY"
            }
        ));
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                itemTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(10, 156, 710, 241);

        buttonGroup1.add(itemCodeR);
        itemCodeR.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        itemCodeR.setSelected(true);
        itemCodeR.setText("  By  ItemCode");
        itemCodeR.setOpaque(false);
        itemCodeR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemCodeRMouseClicked(evt);
            }
        });
        itemCodeR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeRActionPerformed(evt);
            }
        });
        jPanel1.add(itemCodeR);
        itemCodeR.setBounds(30, 60, 131, 31);

        itemCodeCombo.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        itemCodeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemCodeComboItemStateChanged(evt);
            }
        });
        jPanel1.add(itemCodeCombo);
        itemCodeCombo.setBounds(20, 90, 180, 31);

        buttonGroup1.add(itemNameR);
        itemNameR.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        itemNameR.setText("  By Name");
        itemNameR.setOpaque(false);
        itemNameR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemNameRMouseClicked(evt);
            }
        });
        itemNameR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameRActionPerformed(evt);
            }
        });
        jPanel1.add(itemNameR);
        itemNameR.setBounds(210, 60, 99, 31);

        nameCombo.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        nameCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nameComboItemStateChanged(evt);
            }
        });
        jPanel1.add(nameCombo);
        nameCombo.setBounds(210, 90, 320, 31);

        buttonGroup1.add(itemCAtergoryR);
        itemCAtergoryR.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        itemCAtergoryR.setText("  By Category");
        itemCAtergoryR.setOpaque(false);
        itemCAtergoryR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemCAtergoryRMouseClicked(evt);
            }
        });
        itemCAtergoryR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCAtergoryRActionPerformed(evt);
            }
        });
        jPanel1.add(itemCAtergoryR);
        itemCAtergoryR.setBounds(540, 60, 121, 31);

        categoryCombo.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        categoryCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryComboItemStateChanged(evt);
            }
        });
        jPanel1.add(categoryCombo);
        categoryCombo.setBounds(540, 90, 360, 31);
        jPanel1.add(jSeparator2);
        jSeparator2.setBounds(10, 135, 877, 10);

        updatePenal.setBackground(new java.awt.Color(255, 255, 255));
        updatePenal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel3.setText("Item Code         :");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel4.setText("Item Name        :");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel5.setText("Item Category   :");

        itemName.setEditable(false);
        itemName.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        itemCatergory.setEditable(false);
        itemCatergory.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        itemCode.setEditable(false);
        itemCode.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel7.setText("Selling Price      :");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel6.setText("QTY                    :");

        sellingPrice.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        sellingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sellingPriceKeyReleased(evt);
            }
        });

        qty.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyKeyReleased(evt);
            }
        });

        buyingPrice.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        buyingPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                buyingPriceKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel2.setText("Buying Price      :");

        jButton2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        increseButton.setBackground(new java.awt.Color(255, 255, 255));
        increseButton.setText("Increase");

        decreaseRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        decreaseRadioButton.setText("Decrease");

        javax.swing.GroupLayout updatePenalLayout = new javax.swing.GroupLayout(updatePenal);
        updatePenal.setLayout(updatePenalLayout);
        updatePenalLayout.setHorizontalGroup(
            updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePenalLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(24, 24, 24)
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(updatePenalLayout.createSequentialGroup()
                        .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePenalLayout.createSequentialGroup()
                        .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itemCatergory, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePenalLayout.createSequentialGroup()
                        .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, updatePenalLayout.createSequentialGroup()
                                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, updatePenalLayout.createSequentialGroup()
                                .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, updatePenalLayout.createSequentialGroup()
                        .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(updatePenalLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(decreaseRadioButton))
                            .addGroup(updatePenalLayout.createSequentialGroup()
                                .addComponent(buyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(increseButton)))
                        .addGap(54, 54, 54))))
        );
        updatePenalLayout.setVerticalGroup(
            updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePenalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(itemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buyingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(increseButton))
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePenalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(updatePenalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(decreaseRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updatePenalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemCatergory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jPanel1.add(updatePenal);
        updatePenal.setBounds(10, 415, 877, 142);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/Viewwwwd.jpg"))); // NOI18N
        jLabel8.setToolTipText("");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(0, 0, 910, 570);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 909, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void itemCodeRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemCodeRMouseClicked

    }//GEN-LAST:event_itemCodeRMouseClicked

    private void itemNameRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemNameRMouseClicked

    }//GEN-LAST:event_itemNameRMouseClicked

    private void itemCAtergoryRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemCAtergoryRMouseClicked

    }//GEN-LAST:event_itemCAtergoryRMouseClicked

    private void itemNameRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameRActionPerformed
        itemCodeCombo.setEnabled(false);
        nameCombo.setEnabled(true);
        categoryCombo.setEnabled(false);
        JTextField txt1 = (JTextField) nameCombo.getEditor().getEditorComponent();
        txt1.setText(null);
        JTextField txt = (JTextField) itemCodeCombo.getEditor().getEditorComponent();
        txt.setText(null);
        JTextField txt2 = (JTextField) categoryCombo.getEditor().getEditorComponent();
        txt2.setText(null);
        txt.requestFocus();
        resetAll();
        try {
            if (nameCombo.getItemCount() > 0 && nameCombo.getSelectedItem().toString().trim().length() > 1 && nameCombo.getSelectedItem().toString().trim().split("<##>").length == 3) {
                setItemsToTableByName();
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemNameRActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyActionPerformed

    private void itemCodeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemCodeComboItemStateChanged

        if (itemCodeCombo.getItemCount() > 0 && itemCodeCombo.getSelectedItem().toString().trim().length() > 1) {
            try {
                setItemsToTableById();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            }
            resetAll();
        } else if (itemCodeCombo.getSelectedItem() != null && itemCodeCombo.getSelectedItem().toString().trim().length() <= 1) {
            tableModel.setRowCount(0);
            resetAll();
        }
    }//GEN-LAST:event_itemCodeComboItemStateChanged

    private void nameComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nameComboItemStateChanged

        if (nameCombo.getItemCount() > 0 && nameCombo.getSelectedItem().toString().trim().length() > 1) {
            try {
                setItemsToTableByName();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            }
            resetAll();
        } else if (nameCombo.getSelectedItem() != null && nameCombo.getSelectedItem().toString().trim().length() <= 1) {
            resetAll();
            tableModel.setRowCount(0);
        }
    }//GEN-LAST:event_nameComboItemStateChanged

    private void categoryComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryComboItemStateChanged

        if (categoryCombo.getItemCount() > 0 && categoryCombo.getSelectedItem().toString().trim().length() > 1 && categoryCombo.getSelectedItem().toString().trim().split("<##>").length == 2) {
            try {
                setItemsToTableByCatergory();
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
            }
            resetAll();
        } else if (categoryCombo.getSelectedItem() != null && categoryCombo.getSelectedItem().toString().trim().length() <= 1) {
            resetAll();
            tableModel.setRowCount(0);
        }
    }//GEN-LAST:event_categoryComboItemStateChanged

    private void itemTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMousePressed
        try {
            setData();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemTableMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ItemControllerByChule itemController = new ItemControllerByChule();
        int res = 0;
        try {
            if (!(qty.getText().isEmpty() || buyingPrice.getText().isEmpty() || sellingPrice.getText().isEmpty())) {
                if ((buyingPrice.getText().trim().matches("[\\d]+[.]{1}[\\d]+") || buyingPrice.getText().trim().matches("[\\d]+")) && (sellingPrice.getText().trim().matches("[\\d]+[.]{1}[\\d]+") || sellingPrice.getText().trim().matches("[\\d]+"))) {
                    if (increseButton.isSelected()) {
                        if (Integer.parseInt(qty.getText().trim()) > 0) {
                            res = itemController.updateItemPrice(new Item().setItemCode(tableModel.getValueAt(itemTable.getSelectedRow(), 0).toString().trim()).setQtyOnHand(Integer.parseInt(tableModel.getValueAt(itemTable.getSelectedRow(), 3).toString().trim()) + Integer.parseInt(qty.getText().trim())).setSellingprice(Double.parseDouble(sellingPrice.getText())).setSupplierPrice(Double.parseDouble(buyingPrice.getText())));
                        } else {
                            JOptionPane.showMessageDialog(null, "Your qty must be greater than 0", null, JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                    } else {
                        if (Integer.parseInt(qty.getText().trim()) <= Integer.parseInt(tableModel.getValueAt(itemTable.getSelectedRow(), 3).toString().trim()) && Integer.parseInt(qty.getText().trim()) > 0) {
                            res = itemController.updateItemPrice(new Item().setItemCode(tableModel.getValueAt(itemTable.getSelectedRow(), 0).toString().trim()).setQtyOnHand(Integer.parseInt(tableModel.getValueAt(itemTable.getSelectedRow(), 3).toString().trim()) - Integer.parseInt(qty.getText().trim())).setSellingprice(Double.parseDouble(sellingPrice.getText())).setSupplierPrice(Double.parseDouble(buyingPrice.getText())));
                        } else {
                            JOptionPane.showMessageDialog(null, "Your qty must be less than or equal to store qty", null, JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Updating is successed", null, JOptionPane.INFORMATION_MESSAGE);
                        if (itemCodeR.isSelected()) {
                            setItemsToTableById();
                        } else if (itemNameR.isSelected()) {
                            setItemsToTableByName();
                        } else {
                            setItemsToTableByCatergory();
                        }
                        resetAll();
                    } else {
                        JOptionPane.showMessageDialog(null, "Updating is not successed", null, JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please check buyingPrice & sellingPrice", null, JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "please fill all fields or select a item", null, JOptionPane.ERROR_MESSAGE);
            }

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void buyingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buyingPriceKeyReleased
        Validation.validateprice(buyingPrice);
    }//GEN-LAST:event_buyingPriceKeyReleased

    private void sellingPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sellingPriceKeyReleased
        Validation.validateprice(sellingPrice);
    }//GEN-LAST:event_sellingPriceKeyReleased

    private void qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyReleased
        Validation.validateprice(qty);
    }//GEN-LAST:event_qtyKeyReleased

    private void itemCodeRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeRActionPerformed
        itemCodeCombo.setEnabled(true);
        nameCombo.setEnabled(false);
        categoryCombo.setEnabled(false);
        resetAll();
        JTextField txt = (JTextField) itemCodeCombo.getEditor().getEditorComponent();
        txt.setText(null);
        JTextField txt1 = (JTextField) nameCombo.getEditor().getEditorComponent();
        txt1.setText(null);
        JTextField txt2 = (JTextField) categoryCombo.getEditor().getEditorComponent();
        txt2.setText(null);
        txt.requestFocus();
        try {
            getItemListById();
            setItemsToTableById();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemCodeRActionPerformed

    private void itemCAtergoryRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCAtergoryRActionPerformed
        itemCodeCombo.setEnabled(false);
        categoryCombo.setEnabled(true);
        nameCombo.setEnabled(false);
        resetAll();
        JTextField txt = (JTextField) categoryCombo.getEditor().getEditorComponent();
        txt.setText(null);
        JTextField txt2 = (JTextField) itemCodeCombo.getEditor().getEditorComponent();
        txt2.setText(null);
        JTextField txt1 = (JTextField) nameCombo.getEditor().getEditorComponent();
        txt1.setText(null);        
        txt.requestFocus();
        try {
            if (categoryCombo.getItemCount() > 0 && categoryCombo.getSelectedItem().toString().trim().length() > 1 && categoryCombo.getSelectedItem().toString().trim().split("<##>").length == 3) {
                setItemsToTableByCatergory();
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_itemCAtergoryRActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField buyingPrice;
    private javax.swing.JComboBox categoryCombo;
    private javax.swing.JRadioButton decreaseRadioButton;
    private javax.swing.JRadioButton increseButton;
    private javax.swing.JRadioButton itemCAtergoryR;
    private javax.swing.JTextField itemCatergory;
    private javax.swing.JTextField itemCode;
    private javax.swing.JComboBox itemCodeCombo;
    private javax.swing.JRadioButton itemCodeR;
    private javax.swing.JTextField itemName;
    private javax.swing.JRadioButton itemNameR;
    private javax.swing.JTable itemTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox nameCombo;
    private javax.swing.JTextField qty;
    private javax.swing.JTextField sellingPrice;
    private javax.swing.JPanel updatePenal;
    // End of variables declaration//GEN-END:variables
    private void getItemListById() throws ClassNotFoundException, SQLException, IOException {
        itemCodeCombo.removeAllItems();
        ItemControllerByChule itemController = new ItemControllerByChule();
        ArrayList<Item> allItem = itemController.getAllItems();
        itemCodeCombo.addItem("");
        for (Item item : allItem) {
            itemCodeCombo.addItem(item.getItemCode());
        }
        itemListById.setSearchableCombo(itemCodeCombo, true, null);
    }

    private void getItemListByName() throws ClassNotFoundException, SQLException, IOException {
        nameCombo.removeAllItems();
        ItemControllerByChule itemController = new ItemControllerByChule();
        ArrayList<Item> allItem = itemController.getAllItems();
        nameCombo.addItem("");
        for (Item item : allItem) {
            nameCombo.addItem(item.getItemName());
        }
        itemListByName.setSearchableCombo(nameCombo, true, null);
    }

    private void getCategoryList() throws ClassNotFoundException, SQLException, IOException {
        categoryCombo.removeAllItems();
        CatergoryControllerByChule catergoryController = new CatergoryControllerByChule();
        ArrayList<Catergory> allCategories = catergoryController.getAllCatergories();
        categoryCombo.addItem("");
        for (Catergory category : allCategories) {
            categoryCombo.addItem(category.getCatergoryName().trim() + "<##>" + category.getCategeryId().trim());
        }
        getCategoryList.setSearchableCombo(categoryCombo, true, null);
    }

    private void setItemsToTableById() throws ClassNotFoundException, SQLException, IOException {
        tableModel.setRowCount(0);
        ItemControllerByChule itemController = new ItemControllerByChule();
        Item item = itemController.searchItem(itemCodeCombo.getSelectedItem().toString());
        if (item != null) {
            CatergoryControllerByChule catergoryController = new CatergoryControllerByChule();
            Catergory searchCatergory = catergoryController.searchCatergory(item.getCatergoryId());
            tableModel.addRow(new String[]{item.getItemCode(), item.getItemName(), searchCatergory.getCatergoryName(), String.valueOf(item.getQtyOnHand())});
        }

    }

    private void setItemsToTableByName() throws ClassNotFoundException, SQLException, IOException {
        tableModel.setRowCount(0);
        ItemControllerByChule itemController = new ItemControllerByChule();
        Item item = itemController.searchItemByName(nameCombo.getSelectedItem().toString());
        if (item != null) {
            CatergoryControllerByChule catergoryController = new CatergoryControllerByChule();
            Catergory searchCatergory = catergoryController.searchCatergory(item.getCatergoryId());
            tableModel.addRow(new String[]{item.getItemCode(), item.getItemName(), searchCatergory.getCatergoryName(), String.valueOf(item.getQtyOnHand())});
        }
    }

    private void setItemsToTableByCatergory() throws ClassNotFoundException, SQLException, IOException {
        tableModel.setRowCount(0);
        ItemControllerByChule itemController = new ItemControllerByChule();
        if (categoryCombo.getSelectedItem().toString().length() > 0) {
            ArrayList<Item> allItemsForCategoryID = itemController.getAllItemsForCategoryID(categoryCombo.getSelectedItem().toString().split("<##>")[1].trim());
            CatergoryControllerByChule catergoryController = new CatergoryControllerByChule();
            for (Item item : allItemsForCategoryID) {
                tableModel.addRow(new String[]{item.getItemCode(), item.getItemName(), categoryCombo.getSelectedItem().toString().split("<##>")[0].trim(), String.valueOf(item.getQtyOnHand())});
            }
        }
    }

    private void resetAll() {
        itemName.setText(null);
        itemCode.setText(null);
        itemCatergory.setText(null);
        buyingPrice.setText(null);
        sellingPrice.setText(null);
        qty.setText(null);
        increseButton.setSelected(true);
    }

    private void setData() throws ClassNotFoundException, SQLException, IOException {
        ItemControllerByChule itemController = new ItemControllerByChule();
        Item searchItem = itemController.searchItem(tableModel.getValueAt(itemTable.getSelectedRow(), 0).toString());
        if (searchItem != null) {
            itemName.setText(searchItem.getItemName());
            itemCode.setText(searchItem.getItemCode());
            itemCatergory.setText(searchItem.getCatergoryId());
            buyingPrice.setText(String.valueOf(searchItem.getSupplierPrice()));
            sellingPrice.setText(String.valueOf(searchItem.getSellingprice()));
        }
    }
}
