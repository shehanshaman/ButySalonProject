/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.CreditController;
import controller.ItemControllerByChule;
import controller.ItemControllerByDilan;
import controller.OrderControllerByDilan;
import controller.OrderDetailControllerByDilan;
import controller.ReturnedItemController;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.Credit;
import models.OrderDetail;
import models.ReturnedItems;

/**
 *
 * @author Kanishka Gunarathna
 */
public class ReturnPenal extends javax.swing.JPanel {

    /**
     * Creates new form ReturnPenal
     */
    public DefaultTableModel tableModel = new DefaultTableModel();
    public DefaultTableModel returnedItemModel = new DefaultTableModel();

    public ReturnPenal() {
        initComponents();
        orderId.setFocusable(true);
        tableModel = (DefaultTableModel) returnItemCart.getModel();
        returnedItemModel = (DefaultTableModel) returnedItem.getModel();
        returnItemCart.setComponentPopupMenu(returneMenu);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returneMenu = new javax.swing.JPopupMenu();
        returnItems = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        orderId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        orderDate = new javax.swing.JTextField();
        orderTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        returnItemCart = new javax.swing.JTable();
        total = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        returnedItem = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        discountAmount = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        netAmount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        returnItems.setFont(new java.awt.Font("Times New Roman", 1, 22)); // NOI18N
        returnItems.setText("Return");
        returnItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemsActionPerformed(evt);
            }
        });
        returneMenu.add(returnItems);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 0, 48)); // NOI18N
        jLabel1.setText("Returns");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(340, 10, 182, 57);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(10, 80, 872, 10);

        orderId.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        orderId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIdActionPerformed(evt);
            }
        });
        jPanel1.add(orderId);
        orderId.setBounds(190, 100, 203, 36);

        jLabel2.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jLabel2.setText("Bill No     :");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 100, 105, 30);

        jLabel5.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel5.setText("Order Date :");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(520, 100, 107, 29);

        orderDate.setEditable(false);
        orderDate.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jPanel1.add(orderDate);
        orderDate.setBounds(650, 100, 173, 29);

        orderTime.setEditable(false);
        orderTime.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jPanel1.add(orderTime);
        orderTime.setBounds(650, 140, 173, 29);

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel3.setText("Order Time :");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(520, 140, 111, 22);

        user.setEditable(false);
        user.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jPanel1.add(user);
        user.setBounds(190, 150, 200, 29);

        returnItemCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name", "Selling price", "Order QTY", "Total Each Item"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(returnItemCart);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 230, 580, 250);

        total.setEditable(false);
        total.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jPanel1.add(total);
        total.setBounds(530, 500, 173, 36);

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 1, 24)); // NOI18N
        jLabel4.setText("Total Price");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(390, 500, 129, 36);

        jLabel6.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel6.setText("User                :");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 150, 130, 30);

        returnedItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code", "Name", "Retu: date", "Return Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(returnedItem);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(628, 280, 260, 201);

        jLabel8.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Previous Returns");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(660, 230, 210, 30);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/usercontrolBackgroundl.jpg"))); // NOI18N
        jPanel1.add(jLabel7);
        jLabel7.setBounds(0, 0, 900, 80);

        jLabel9.setFont(new java.awt.Font("Lucida Bright", 1, 24)); // NOI18N
        jLabel9.setText("Discount :");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(60, 500, 122, 36);

        discountAmount.setEditable(false);
        discountAmount.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N
        jPanel1.add(discountAmount);
        discountAmount.setBounds(200, 500, 173, 36);

        jLabel10.setFont(new java.awt.Font("Lucida Bright", 0, 18)); // NOI18N
        jLabel10.setText("Net amount :");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(511, 180, 120, 22);

        netAmount.setEditable(false);
        netAmount.setFont(new java.awt.Font("Calibri Light", 1, 18)); // NOI18N
        jPanel1.add(netAmount);
        netAmount.setBounds(650, 180, 173, 29);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Return all items");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(270, 190, 140, 30);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setText("Return this marked item");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(60, 190, 200, 30);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 899, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orderIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIdActionPerformed
        try {
            getOrderDetails();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_orderIdActionPerformed

    private void returnItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnItemsActionPerformed
        if (returnItemCart.getSelectedRow() != -1) {
            int res = JOptionPane.showConfirmDialog(null, "Are you sure want to return this item?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                orderId.setEnabled(false);
                String qtyOrder = tableModel.getValueAt(returnItemCart.getSelectedRow(), 3).toString();
                int qtyNum = Integer.parseInt(qtyOrder);
                if (qtyNum > 1) {
                    String returnQty = JOptionPane.showInputDialog(null, "Please enter the return amount");
                    if (returnQty != null && !returnQty.isEmpty() && returnQty.matches("[\\d]+") && Integer.parseInt(returnQty) <= qtyNum && Integer.parseInt(returnQty) > 0) {
                        try {
                            returnThisItem(Integer.parseInt(returnQty));
                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please enter tne valid qty", null, JOptionPane.ERROR_MESSAGE);
                        orderId.setEnabled(true);
                    }
                } else {
                    try {
                        returnThisItem(1);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Return all process is canceled by user");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a item", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_returnItemsActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (returnItemCart.getSelectedRow() != -1) {
            int res = JOptionPane.showConfirmDialog(null, "Are you sure want to return this item?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                orderId.setEnabled(false);
                String qtyOrder = tableModel.getValueAt(returnItemCart.getSelectedRow(), 3).toString();
                int qtyNum = Integer.parseInt(qtyOrder);
                if (qtyNum > 1) {
                    String returnQty = JOptionPane.showInputDialog(null, "Please enter the return amount");
                    if (returnQty != null && !returnQty.isEmpty() && returnQty.matches("[\\d]+") && Integer.parseInt(returnQty) <= qtyNum && Integer.parseInt(returnQty) > 0) {
                        try {
                            returnThisItem(Integer.parseInt(returnQty));
                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please enter tne valid qty", null, JOptionPane.ERROR_MESSAGE);
                        orderId.setEnabled(true);
                    }
                } else {
                    try {
                        returnThisItem(1);
                    } catch (ClassNotFoundException ex) {
                        JOptionPane.showMessageDialog(null, "ClassNotFoundException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "SQLException occured. Please restart the system", null, JOptionPane.ERROR_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, "IOException occured." + "\n" + "ex.getMessage", null, JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Return process is canceled by user");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a item", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (tableModel.getRowCount() > 0) {
            CreditController controller = new CreditController();
            int res = JOptionPane.showConfirmDialog(null, "Are sure want to do it ?", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                int res1 = JOptionPane.showConfirmDialog(null, "All items will be added to the system\nAre sure want to do it anyway ?", "Confirmation", JOptionPane.YES_NO_OPTION);

                if (res1 == JOptionPane.YES_OPTION) {
                    ItemControllerByChule itemController = new ItemControllerByChule();
                    try {
                        boolean addCredits = controller.addCredits(new Credit(controller.getNewCreditId(), orderId.getText().trim(), Double.parseDouble(netAmount.getText().trim())));
                        if(addCredits){
                            JOptionPane.showMessageDialog(null, "You have " + Double.parseDouble(netAmount.getText().trim()) + " credits after clamin the discount\nAnd discount was clamed.");
                        }else{
                            JOptionPane.showMessageDialog(null, "Couldn't complete", "Order's discount didn't clame", JOptionPane.WARNING_MESSAGE);
                        }
                        for (int i = 0; i < returnItemCart.getRowCount(); i++) {
                            String itemCode = tableModel.getValueAt(i, 0).toString();
                            int qty = Integer.parseInt(tableModel.getValueAt(i, 3).toString());
                            int newItemQty = qty + itemController.searchItem(itemCode).getQtyOnHand();
                            itemController.updateItemQty(itemCode, newItemQty);
                        }
                        OrderControllerByDilan dilan = new OrderControllerByDilan();
                        if (dilan.removeOrders(orderId.getText().trim())) {
                            getOrderDetails();
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ReturnPenal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ReturnPenal.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(ReturnPenal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Return all process is canceled by user");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select the order first", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField discountAmount;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField netAmount;
    private javax.swing.JTextField orderDate;
    private javax.swing.JTextField orderId;
    private javax.swing.JTextField orderTime;
    private javax.swing.JTable returnItemCart;
    private javax.swing.JMenuItem returnItems;
    private javax.swing.JPopupMenu returneMenu;
    private javax.swing.JTable returnedItem;
    private javax.swing.JTextField total;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
    private void resetAll() {
        orderDate.setText(null);
        orderTime.setText(null);
        user.setText(null);
        total.setText(null);
        tableModel.setRowCount(0);
        returnedItemModel.setRowCount(0);
        orderId.setText(null);
        netAmount.setText(null);
        discountAmount.setText(null);
    }

    private void getReturnedItems(String orderId) throws ClassNotFoundException, SQLException, IOException {
        returnedItemModel.setRowCount(0);
        ReturnedItemController itemController = new ReturnedItemController();
        ItemControllerByChule itemController2 = new ItemControllerByChule();
        ArrayList<ReturnedItems> returnedItems = itemController.getReturnedItems(orderId);
        for (ReturnedItems returnedItems1 : returnedItems) {
            returnedItemModel.addRow(new String[]{returnedItems1.getItemCode(), itemController2.searchItem(returnedItems1.getItemCode()).getItemName(), returnedItems1.getReturnDate(), String.valueOf(returnedItems1.getReturnedQty())});
        }
    }

    private void returnThisItem(int qty) throws ClassNotFoundException, SQLException, IOException {
        String qtyOrder = tableModel.getValueAt(returnItemCart.getSelectedRow(), 3).toString();
        String itemCode = tableModel.getValueAt(returnItemCart.getSelectedRow(), 0).toString();
        int qtyNum = Integer.parseInt(qtyOrder);
        double newTotalPrice = (qtyNum - qty) * Double.parseDouble(tableModel.getValueAt(returnItemCart.getSelectedRow(), 2).toString());

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        ReturnedItemController controller = new ReturnedItemController();
        ReturnedItems returnedItems = new ReturnedItems(controller.getNewReturnId(), orderId.getText().trim(), tableModel.getValueAt(returnItemCart.getSelectedRow(), 0).toString().trim(), dateFormat.format(new Date()), qty);
        boolean step1 = false, step2 = false, step4 = false, step5 = false;
        setCreditsForTheOrder(qty);
        if ((qtyNum - qty) == 0) {
            step1 = OrderDetailControllerByDilan.removeOrderDetail(orderId.getText().trim(), itemCode);
            tableModel.removeRow(returnItemCart.getSelectedRow());
            setTotal();
        } else {
            step1 = OrderDetailControllerByDilan.updateOrderDetail((qtyNum - qty), newTotalPrice, orderId.getText(), itemCode);
            tableModel.setValueAt(newTotalPrice, returnItemCart.getSelectedRow(), 4);
            setTotal();
        }
        if (step1) {
            OrderControllerByDilan orderController = new OrderControllerByDilan();
            step2 = orderController.updateOrderAmount(setTotal(), orderId.getText().trim());
            if (step2) {
                if (controller.addReturnedItems(returnedItems) > 0) {
                    int step3 = JOptionPane.showConfirmDialog(null, "Do you want this return items back in the system? ", "Asking", JOptionPane.YES_NO_OPTION);
                    if (step3 == JOptionPane.YES_OPTION) {
                        ItemControllerByChule controllerBy = new ItemControllerByChule();
                        step4 = controllerBy.updateItemQty(itemCode, qty + controllerBy.searchItem(itemCode).getQtyOnHand());
                    } else {
                        if (setTotal() == 0) {
                            OrderControllerByDilan dilan = new OrderControllerByDilan();
                            step5 = dilan.removeOrders(orderId.getText().trim());
                        } else {
                            step5 = setTotal() > 0;
                            //JOptionPane.showMessageDialog(null, "Order removing is not successed", null, JOptionPane.ERROR_MESSAGE);
                        }
                        if (step5) {
                            JOptionPane.showMessageDialog(null, "Return is successed", null, JOptionPane.INFORMATION_MESSAGE);
                            getOrderDetails();
                            getReturnedItems(orderId.getText().trim());
                            orderId.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Return is not successed", null, JOptionPane.ERROR_MESSAGE);
                            orderId.setEnabled(true);
                        }
                        return;
                    }
                    if (step4) {
                        if (setTotal() == 0) {
                            OrderControllerByDilan dilan = new OrderControllerByDilan();
                            step5 = dilan.removeOrders(orderId.getText().trim());
                        } else {
                            step5 = setTotal() > 0;
                            //JOptionPane.showMessageDialog(null, "Order removing is not successed", null, JOptionPane.ERROR_MESSAGE);
                        }
                        if (step5) {
                            JOptionPane.showMessageDialog(null, "Return is successed", null, JOptionPane.INFORMATION_MESSAGE);
                            getOrderDetails();
                            getReturnedItems(orderId.getText().trim());
                            orderId.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "Return is not successed", null, JOptionPane.ERROR_MESSAGE);
                            orderId.setEnabled(true);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Qty updating is not successed" + "\n" + "This item might not be exsisting", null, JOptionPane.ERROR_MESSAGE);
                        orderId.setEnabled(true);
                        resetAll();
                    }
                }
            } else {
                //JOptionPane.showMessageDialog(null, "Order updating is not successed", null, JOptionPane.ERROR_MESSAGE);
                orderId.setEnabled(true);
                resetAll();
            }
        } else {
            //JOptionPane.showMessageDialog(null, "OrderDetail updating is not successed", null, JOptionPane.ERROR_MESSAGE);
            orderId.setEnabled(true);
            resetAll();
        }
    }

    private double setTotal() {
        double newTotal = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String amount = tableModel.getValueAt(i, 4).toString();
            newTotal += Double.parseDouble(amount);
        }
        total.setText(String.valueOf(newTotal));
        return newTotal;
    }

    private void getOrderDetails() throws ClassNotFoundException, SQLException, IOException {
        tableModel.setRowCount(0);
        OrderControllerByDilan orderController = new OrderControllerByDilan();
        if (orderId.getText() != null && orderController.searchOrders(orderId.getText()) != null) {
            orderDate.setText(orderController.searchOrders(orderId.getText()).getOrderDate());
            orderTime.setText(orderController.searchOrders(orderId.getText()).getTime());
            user.setText(orderController.searchOrders(orderId.getText()).getUserName());
            discountAmount.setText(String.valueOf(orderController.searchOrders(orderId.getText()).getDiscountAmount()));
            netAmount.setText(String.valueOf(orderController.searchOrders(orderId.getText()).getTotalAmount() - orderController.searchOrders(orderId.getText()).getDiscountAmount()));

            ArrayList<OrderDetail> orderDetailList = OrderDetailControllerByDilan.searchOrderDetail(orderId.getText());
            ItemControllerByDilan itemController = new ItemControllerByDilan();
            for (OrderDetail orderDetailList1 : orderDetailList) {
                String[] item = {orderDetailList1.getItemCode(), 
                    itemController.searchItem(orderDetailList1.getItemCode()).getItemName(),
                    String.valueOf(orderDetailList1.getSellingPrice()),
                    String.valueOf(orderDetailList1.getOrderQty()),
                    String.valueOf(orderDetailList1.getTotalPerEachItem())};
                tableModel.addRow(item);
            }
            total.setText(String.valueOf(orderController.searchOrders(orderId.getText()).getTotalAmount()));
            getReturnedItems(orderId.getText().trim());
        } else {
            JOptionPane.showMessageDialog(null, "There is no such order in the system ", null, JOptionPane.ERROR_MESSAGE);
            resetAll();
            orderId.requestFocus();
        }
    }

    private void updateOrderDetail() {
        OrderDetailControllerByDilan controller = new OrderDetailControllerByDilan();
        ArrayList<OrderDetail> detail = new ArrayList<>();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String itemCode = tableModel.getValueAt(i, 0).toString().trim();
        }
    }

    private void setCreditsForTheOrder(int qty) throws ClassNotFoundException, IOException, SQLException {
        if (((Double.parseDouble(tableModel.getValueAt(returnItemCart.getSelectedRow(), 2).toString().trim())) * qty) > Double.parseDouble(discountAmount.getText().trim())) {
            double creditAmount = (Double.parseDouble(tableModel.getValueAt(returnItemCart.getSelectedRow(), 2).toString().trim())) * qty - Double.parseDouble(discountAmount.getText().trim());
            CreditController creditController = new CreditController();
            creditController.addCredits(new Credit(creditController.getNewCreditId(), orderId.getText().trim(), creditAmount));
            if (new OrderControllerByDilan().updateDiscountAmount(0.0, orderId.getText().trim())) {
                JOptionPane.showMessageDialog(null, "You have " + creditAmount + " credits after clamin the discount\nAnd discount was clamed.");
            } else {
                JOptionPane.showMessageDialog(null, "Couldn't complete", "Order's discount didn't clame", JOptionPane.WARNING_MESSAGE);
            }

        } else if (((Double.parseDouble(tableModel.getValueAt(returnItemCart.getSelectedRow(), 2).toString().trim())) * qty) == Double.parseDouble(discountAmount.getText().trim())) {
            double creditAmount = 0.0;
            CreditController creditController = new CreditController();
            creditController.addCredits(new Credit(creditController.getNewCreditId(), orderId.getText().trim(), creditAmount));
            if (new OrderControllerByDilan().updateDiscountAmount(0.0, orderId.getText().trim())) {
                JOptionPane.showMessageDialog(null, "You have " + creditAmount + " credits after clamin the discount\nAnd discount was clamed.");
            } else {
                JOptionPane.showMessageDialog(null, "Couldn't complete", "Order's discount didn't clame", JOptionPane.WARNING_MESSAGE);
            }

        } else {
            double creditAmount = 0.0;
            CreditController creditController = new CreditController();
            creditController.addCredits(new Credit(creditController.getNewCreditId(), orderId.getText().trim(), creditAmount));
            double newDiscount = (Double.parseDouble(discountAmount.getText().trim())) - ((Double.parseDouble(tableModel.getValueAt(returnItemCart.getSelectedRow(), 2).toString().trim())) * qty);
            if (new OrderControllerByDilan().updateDiscountAmount(newDiscount, orderId.getText().trim())) {
                JOptionPane.showMessageDialog(null, "You have " + creditAmount + " credits after clamin the discount\nThis order has stil " + newDiscount + " to clame");
            } else {
                JOptionPane.showMessageDialog(null, "Couldn't complete", "Order's discount didn't clame", JOptionPane.WARNING_MESSAGE);
            }
        }
    }
}
